(self.webpackChunk=self.webpackChunk||[]).push([[179],{656:function(){0},320:function(){"use strict";var e=class{constructor(e){this.type=e,"cross"===this.type?this.figureHTML='<svg height="100" width="100"><g><line x1="0" y1="0" x2="100" y2="100" style="stroke:#000; stroke-width:5" /><line x1="100" y1="0" x2="0" y2="100" style="stroke:#000; stroke-width:5" /></g></svg>':this.figureHTML='<svg height="100" width="100"><circle cx="50" cy="50" r="47" stroke="#000" stroke-width="5" fill="none" /></svg>'}render(e){e.innerHTML=this.figureHTML}};var t=class{constructor(e,t){this.hostElement=document.getElementById(e),this.templateElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,this.renderElement()}renderElement(){this.hostElement.insertAdjacentElement("afterbegin",this.element)}};var s=class extends t{constructor(){super("app","board"),this.cross=new e("cross"),this.circle=new e("circle"),this.state=[[0,0,0],[0,0,0],[0,0,0]],this.movesCount=0}renderFigure(e,t){1===t?this.cross.render(e):this.circle.render(e)}updateState(e,t){const s=parseInt(e.dataset.row),r=parseInt(e.dataset.column);this.state[s][r]=1===t?1:10}clear(){this.state=[[0,0,0],[0,0,0],[0,0,0]],this.movesCount=0;this.element.querySelectorAll(".field").forEach((e=>{e.innerHTML=""}))}disable(){this.element.classList.add("disabled")}enable(){this.element.classList.remove("disabled")}checkWin(){for(let e=0;e<this.state.length;e++){const t=this.state[e].reduce(((e,t)=>e+t));if(3===t&&console.log("1"),30===t&&console.log("2"),3===t)return 1;if(30===t)return 2}for(let e=0;e<this.state.length;e++){const t=[this.state[0][e],this.state[1][e],this.state[2][e]].reduce(((e,t)=>e+t));if(3===t&&console.log("1"),30===t&&console.log("2"),3===t)return 1;if(30===t)return 2}{const e=[];for(let t=0;t<this.state.length;t++)e.push(this.state[t][t]);const t=e.reduce(((e,t)=>e+t));if(3===t&&console.log("1"),30===t&&console.log("2"),3===t)return 1;if(30===t)return 2}{const e=[];let t=2;for(let s=0;s<this.state.length;s++)e.push(this.state[s][t--]);const s=e.reduce(((e,t)=>e+t));if(3===s&&console.log("1"),30===s&&console.log("2"),3===s)return 1;if(30===s)return 2}if(this.updateMovesCount(),9===this.movesCount)return-1}updateMovesCount(){this.movesCount++}};var r=class extends t{constructor(){super("app","panel"),this.gameInfo=this.element.querySelector(".game-info"),this.drawsCount=document.getElementById("draws_count"),this.player1WinsCount=document.getElementById("player1_win-count"),this.player2WinsCount=document.getElementById("player2_win-count"),this.clearBtn=document.getElementById("clear"),this.clearBtn.addEventListener("click",this.clearScore.bind(this)),this.score=localStorage.getItem("tictactoe")?JSON.parse(localStorage.getItem("tictactoe")):{wins:{player_1:0,player_2:0},draws:0},this.printScore()}storeScore(){localStorage.setItem("tictactoe",JSON.stringify(this.score))}updateScore(e){switch(e){case-1:this.score.draws++;break;case 1:this.score.wins.player_1++;break;case 2:this.score.wins.player_2++;break;default:console.error("There was an error updating the score!")}}printScore(){this.drawsCount.textContent=this.score.draws.toString(),this.player1WinsCount.textContent=this.score.wins.player_1.toString(),this.player2WinsCount.textContent=this.score.wins.player_2.toString()}clearScore(){localStorage.removeItem("tictactoe"),this.score={wins:{player_1:0,player_2:0},draws:0},this.printScore()}printGameInfo(e){this.gameInfo.textContent=e}toggleAnimate(){this.gameInfo.classList.toggle("animate")}};new class{constructor(){this.board=new s,this.panel=new r,this.currentPlayer=1,this.addClickListener()}addClickListener(){document.querySelectorAll(".field").forEach((e=>{e.addEventListener("click",this.onFieldClick.bind(this))}))}onFieldClick(e){const t=e.target;if(!t.innerHTML){this.board.renderFigure(t,this.currentPlayer),this.board.updateState(t,this.currentPlayer),this.updateCurrentPlayer(),this.panel.printGameInfo(`Player ${this.currentPlayer} moves`);const e=this.board.checkWin();e&&(e>0&&this.panel.printGameInfo(`Player ${e} wins!!!`),-1===e&&this.panel.printGameInfo("There was a draw!"),this.panel.updateScore(e),this.panel.printScore(),this.panel.storeScore(),this.restart())}}updateCurrentPlayer(){1===this.currentPlayer?this.currentPlayer++:this.currentPlayer--}restart(){this.board.disable(),this.panel.toggleAnimate(),setTimeout((()=>{this.currentPlayer=1,this.board.clear(),this.panel.printGameInfo("Player 1 moves"),this.board.enable(),this.panel.toggleAnimate()}),3e3)}}}},0,[[320,666],[656,666]]]);